diff --git a/docs/swagger.yaml b/docs/swagger.yaml
index e69de29..65d555a 100644
--- a/docs/swagger.yaml
+++ b/docs/swagger.yaml
@@ -0,0 +1,265 @@
+basePath: /
+definitions:
+  github_com_Sypovik_effectiveMobileTest_internal_dto.CreatePersonRequest:
+    properties:
+      name:
+        example: Ivan
+        type: string
+      patronymic:
+        example: Ivanovich
+        type: string
+      surname:
+        example: Ivanov
+        type: string
+    required:
+    - name
+    - surname
+    type: object
+  github_com_Sypovik_effectiveMobileTest_internal_dto.ListPersonsResponse:
+    description: Paginated list of persons with total count
+    properties:
+      data:
+        description: array of records
+        items:
+          $ref: '#/definitions/github_com_Sypovik_effectiveMobileTest_internal_dto.PersonResponse'
+        type: array
+      page:
+        description: current page
+        example: 1
+        type: integer
+      size:
+        description: page size
+        example: 10
+        type: integer
+      total:
+        description: total number of records
+        example: 100
+        type: integer
+    type: object
+  github_com_Sypovik_effectiveMobileTest_internal_dto.PersonResponse:
+    description: Person information with age, gender and country
+    properties:
+      age:
+        example: 30
+        type: integer
+      country:
+        example: RU
+        type: string
+      created_at:
+        example: "2023-01-01T00:00:00Z"
+        type: string
+      gender:
+        example: мужской
+        type: string
+      id:
+        example: 1
+        type: integer
+      name:
+        example: Иван
+        type: string
+      patronymic:
+        example: Иванович
+        type: string
+      surname:
+        example: Иванов
+        type: string
+      updated_at:
+        example: "2023-01-01T00:00:00Z"
+        type: string
+    type: object
+  github_com_Sypovik_effectiveMobileTest_internal_dto.UpdatePersonRequest:
+    properties:
+      name:
+        example: Ivan
+        type: string
+      patronymic:
+        example: Ivanovich
+        type: string
+      surname:
+        example: Ivanov
+        type: string
+    type: object
+host: localhost:8080
+info:
+  contact: {}
+  description: API for managing persons
+  title: Effective Mobile Test API
+  version: "1.0"
+paths:
+  /people:
+    get:
+      description: Returns a list of persons with pagination and filtering
+      parameters:
+      - description: Filter by name
+        in: query
+        name: name
+        type: string
+      - description: Filter by surname
+        in: query
+        name: surname
+        type: string
+      - description: Filter by patronymic
+        in: query
+        name: patronymic
+        type: string
+      - description: Filter by gender
+        in: query
+        name: gender
+        type: string
+      - description: Filter by country
+        in: query
+        name: country
+        type: string
+      - description: Filter by age
+        in: query
+        name: age
+        type: integer
+      - description: Page number
+        in: query
+        name: page
+        type: integer
+      - description: Page size
+        in: query
+        name: size
+        type: integer
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: List of persons
+          schema:
+            $ref: '#/definitions/github_com_Sypovik_effectiveMobileTest_internal_dto.ListPersonsResponse'
+        "500":
+          description: Internal server error
+          schema:
+            type: object
+      summary: List persons
+      tags:
+      - people
+    post:
+      consumes:
+      - application/json
+      description: Создает новую запись о человеке
+      parameters:
+      - description: Данные для создания персоны
+        in: body
+        name: input
+        required: true
+        schema:
+          $ref: '#/definitions/github_com_Sypovik_effectiveMobileTest_internal_dto.CreatePersonRequest'
+      produces:
+      - application/json
+      responses:
+        "201":
+          description: Успешно создано
+          schema:
+            $ref: '#/definitions/github_com_Sypovik_effectiveMobileTest_internal_dto.PersonResponse'
+        "400":
+          description: Неверный запрос
+          schema:
+            type: object
+        "500":
+          description: Внутренняя ошибка сервера
+          schema:
+            type: object
+      summary: Создать новую персону
+      tags:
+      - people
+  /people/{id}:
+    delete:
+      description: Удаляет запись о человеке по его ID
+      parameters:
+      - description: ID персоны
+        in: path
+        name: id
+        required: true
+        type: integer
+      responses:
+        "204":
+          description: Успешно удалено
+        "400":
+          description: Неверный запрос
+          schema:
+            type: object
+        "404":
+          description: Персона не найдена
+          schema:
+            type: object
+        "500":
+          description: Внутренняя ошибка сервера
+          schema:
+            type: object
+      summary: Удалить персону
+      tags:
+      - people
+    get:
+      consumes:
+      - application/json
+      description: Возвращает информацию о человеке по его идентификатору
+      parameters:
+      - description: ID персоны
+        in: path
+        name: id
+        required: true
+        type: integer
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: Успешный ответ
+          schema:
+            $ref: '#/definitions/github_com_Sypovik_effectiveMobileTest_internal_dto.PersonResponse'
+        "400":
+          description: Неверный ID
+          schema:
+            type: object
+        "404":
+          description: Персона не найдена
+          schema:
+            type: object
+        "500":
+          description: Внутренняя ошибка сервера
+          schema:
+            type: object
+      summary: Получить персону по ID
+      tags:
+      - people
+    put:
+      consumes:
+      - application/json
+      description: Обновляет информацию о человеке по его идентификатору
+      parameters:
+      - description: ID персоны
+        in: path
+        name: id
+        required: true
+        type: integer
+      - description: Данные для обновления
+        in: body
+        name: input
+        required: true
+        schema:
+          $ref: '#/definitions/github_com_Sypovik_effectiveMobileTest_internal_dto.UpdatePersonRequest'
+      produces:
+      - application/json
+      responses:
+        "200":
+          description: Успешный ответ
+          schema:
+            $ref: '#/definitions/github_com_Sypovik_effectiveMobileTest_internal_dto.PersonResponse'
+        "400":
+          description: Неверный запрос
+          schema:
+            type: object
+        "404":
+          description: Персона не найдена
+          schema:
+            type: object
+        "500":
+          description: Внутренняя ошибка сервера
+          schema:
+            type: object
+      summary: Обновить данные персоны
+      tags:
+      - people
+swagger: "2.0"
diff --git a/go.mod b/go.mod
index 1b05405..380de53 100644
--- a/go.mod
+++ b/go.mod
@@ -11,11 +11,19 @@ require (
 
 require (
 	github.com/BurntSushi/toml v1.5.0 // indirect
+	github.com/KyleBanks/depth v1.2.1 // indirect
+	github.com/PuerkitoBio/purell v1.2.1 // indirect
+	github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect
 	github.com/bytedance/sonic v1.13.3 // indirect
 	github.com/bytedance/sonic/loader v0.2.4 // indirect
 	github.com/cloudwego/base64x v0.1.5 // indirect
+	github.com/cpuguy83/go-md2man/v2 v2.0.7 // indirect
 	github.com/gabriel-vasile/mimetype v1.4.9 // indirect
 	github.com/gin-contrib/sse v1.1.0 // indirect
+	github.com/go-openapi/jsonpointer v0.21.1 // indirect
+	github.com/go-openapi/jsonreference v0.21.0 // indirect
+	github.com/go-openapi/spec v0.21.0 // indirect
+	github.com/go-openapi/swag v0.23.1 // indirect
 	github.com/go-playground/locales v0.14.1 // indirect
 	github.com/go-playground/universal-translator v0.18.1 // indirect
 	github.com/go-playground/validator/v10 v10.26.0 // indirect
@@ -27,24 +35,41 @@ require (
 	github.com/jinzhu/inflection v1.0.0 // indirect
 	github.com/jinzhu/now v1.1.5 // indirect
 	github.com/joho/godotenv v1.5.1 // indirect
+	github.com/josharian/intern v1.0.0 // indirect
 	github.com/json-iterator/go v1.1.12 // indirect
 	github.com/klauspost/cpuid/v2 v2.2.10 // indirect
-	github.com/kr/text v0.1.0 // indirect
+	github.com/kr/text v0.2.0 // indirect
 	github.com/leodido/go-urn v1.4.0 // indirect
+	github.com/mailru/easyjson v0.9.0 // indirect
+	github.com/mattn/go-colorable v0.1.14 // indirect
 	github.com/mattn/go-isatty v0.0.20 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
 	github.com/modern-go/reflect2 v1.0.2 // indirect
 	github.com/pelletier/go-toml/v2 v2.2.4 // indirect
 	github.com/rogpeppe/go-internal v1.14.1 // indirect
+	github.com/rs/zerolog v1.34.0 // indirect
+	github.com/russross/blackfriday/v2 v2.1.0 // indirect
+	github.com/samber/lo v1.49.1 // indirect
+	github.com/samber/slog-formatter v1.2.0 // indirect
+	github.com/samber/slog-multi v1.3.3 // indirect
+	github.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect
+	github.com/swaggo/files v1.0.1 // indirect
+	github.com/swaggo/gin-swagger v1.6.0 // indirect
+	github.com/swaggo/swag v1.16.4 // indirect
 	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
 	github.com/ugorji/go/codec v1.2.14 // indirect
-	golang.org/x/arch v0.17.0 // indirect
-	golang.org/x/crypto v0.38.0 // indirect
-	golang.org/x/net v0.40.0 // indirect
-	golang.org/x/sync v0.14.0 // indirect
+	github.com/urfave/cli/v2 v2.27.6 // indirect
+	github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 // indirect
+	golang.org/x/arch v0.18.0 // indirect
+	golang.org/x/crypto v0.39.0 // indirect
+	golang.org/x/net v0.41.0 // indirect
+	golang.org/x/sync v0.15.0 // indirect
 	golang.org/x/sys v0.33.0 // indirect
-	golang.org/x/text v0.25.0 // indirect
+	golang.org/x/text v0.26.0 // indirect
+	golang.org/x/tools v0.34.0 // indirect
 	google.golang.org/protobuf v1.36.6 // indirect
+	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	olympos.io/encoding/edn v0.0.0-20201019073823-d3554ca0b0a3 // indirect
+	sigs.k8s.io/yaml v1.4.0 // indirect
 )
diff --git a/go.sum b/go.sum
index d8aaed3..d22cd5b 100644
--- a/go.sum
+++ b/go.sum
@@ -1,6 +1,14 @@
 github.com/BurntSushi/toml v1.2.1/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=
 github.com/BurntSushi/toml v1.5.0 h1:W5quZX/G/csjUnuI8SUYlsHs9M38FC7znL0lIO+DvMg=
 github.com/BurntSushi/toml v1.5.0/go.mod h1:ukJfTF/6rtPPRCnwkur4qwRxa8vTRFBF0uk2lLoLwho=
+github.com/KyleBanks/depth v1.2.1 h1:5h8fQADFrWtarTdtDudMmGsC7GPbOAu6RVB3ffsVFHc=
+github.com/KyleBanks/depth v1.2.1/go.mod h1:jzSb9d0L43HxTQfT+oSA1EEp2q+ne2uh6XgeJcm8brE=
+github.com/PuerkitoBio/purell v1.1.1 h1:WEQqlqaGbrPkxLJWfBwQmfEAE1Z7ONdDLqrN38tNFfI=
+github.com/PuerkitoBio/purell v1.1.1/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=
+github.com/PuerkitoBio/purell v1.2.1 h1:QsZ4TjvwiMpat6gBCBxEQI0rcS9ehtkKtSpiUnd9N28=
+github.com/PuerkitoBio/purell v1.2.1/go.mod h1:ZwHcC/82TOaovDi//J/804umJFFmbOHPngi8iYYv/Eo=
+github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 h1:d+Bc7a5rLufV/sSk/8dngufqelfh6jnri85riMAaF/M=
+github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=
 github.com/bytedance/sonic v1.13.3 h1:MS8gmaH16Gtirygw7jV91pDCN33NyMrPbN7qiYhEsF0=
 github.com/bytedance/sonic v1.13.3/go.mod h1:o68xyaF9u2gvVBuGHPlUVCy+ZfmNNO5ETf1+KgkJhz4=
 github.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
@@ -9,6 +17,10 @@ github.com/bytedance/sonic/loader v0.2.4/go.mod h1:N8A3vUdtUebEY2/VQC0MyhYeKUFos
 github.com/cloudwego/base64x v0.1.5 h1:XPciSp1xaq2VCSt6lF0phncD4koWyULpl5bUxbfCyP4=
 github.com/cloudwego/base64x v0.1.5/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=
 github.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=
+github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
+github.com/cpuguy83/go-md2man/v2 v2.0.7 h1:zbFlGlXEAKlwXpmvle3d8Oe3YnkKIK4xSRTd3sHPnBo=
+github.com/cpuguy83/go-md2man/v2 v2.0.7/go.mod h1:oOW0eioCTA6cOiMLiUPZOpcVxMig6NIQQ7OS05n1F4g=
+github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
@@ -18,6 +30,24 @@ github.com/gin-contrib/sse v1.1.0 h1:n0w2GMuUpWDVp7qSpvze6fAu9iRxJY4Hmj6AmBOU05w
 github.com/gin-contrib/sse v1.1.0/go.mod h1:hxRZ5gVpWMT7Z0B0gSNYqqsSCNIJMjzvm6fqCz9vjwM=
 github.com/gin-gonic/gin v1.10.1 h1:T0ujvqyCSqRopADpgPgiTT63DUQVSfojyME59Ei63pQ=
 github.com/gin-gonic/gin v1.10.1/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=
+github.com/go-openapi/jsonpointer v0.19.3/go.mod h1:Pl9vOtqEWErmShwVjC8pYs9cog34VGT37dQOVbmoatg=
+github.com/go-openapi/jsonpointer v0.19.5 h1:gZr+CIYByUqjcgeLXnQu2gHYQC9o73G2XUeOFYEICuY=
+github.com/go-openapi/jsonpointer v0.19.5/go.mod h1:Pl9vOtqEWErmShwVjC8pYs9cog34VGT37dQOVbmoatg=
+github.com/go-openapi/jsonpointer v0.21.1 h1:whnzv/pNXtK2FbX/W9yJfRmE2gsmkfahjMKB0fZvcic=
+github.com/go-openapi/jsonpointer v0.21.1/go.mod h1:50I1STOfbY1ycR8jGz8DaMeLCdXiI6aDteEdRNNzpdk=
+github.com/go-openapi/jsonreference v0.19.6 h1:UBIxjkht+AWIgYzCDSv2GN+E/togfwXUJFRTWhl2Jjs=
+github.com/go-openapi/jsonreference v0.19.6/go.mod h1:diGHMEHg2IqXZGKxqyvWdfWU/aim5Dprw5bqpKkTvns=
+github.com/go-openapi/jsonreference v0.21.0 h1:Rs+Y7hSXT83Jacb7kFyjn4ijOuVGSvOdF2+tg1TRrwQ=
+github.com/go-openapi/jsonreference v0.21.0/go.mod h1:LmZmgsrTkVg9LG4EaHeY8cBDslNPMo06cago5JNLkm4=
+github.com/go-openapi/spec v0.20.4 h1:O8hJrt0UMnhHcluhIdUgCLRWyM2x7QkBXRvOs7m+O1M=
+github.com/go-openapi/spec v0.20.4/go.mod h1:faYFR1CvsJZ0mNsmsphTMSoRrNV3TEDoAM7FOEWeq8I=
+github.com/go-openapi/spec v0.21.0 h1:LTVzPc3p/RzRnkQqLRndbAzjY0d0BCL72A6j3CdL9ZY=
+github.com/go-openapi/spec v0.21.0/go.mod h1:78u6VdPw81XU44qEWGhtr982gJ5BWg2c0I5XwVMotYk=
+github.com/go-openapi/swag v0.19.5/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=
+github.com/go-openapi/swag v0.19.15 h1:D2NRCBzS9/pEY3gP9Nl8aDqGUcPFrwG2p+CNFrLyrCM=
+github.com/go-openapi/swag v0.19.15/go.mod h1:QYRuS/SOXUCsnplDa677K7+DxSOj6IPNl/eQntq43wQ=
+github.com/go-openapi/swag v0.23.1 h1:lpsStH0n2ittzTnbaSloVZLuB5+fvSY/+hnagBjSNZU=
+github.com/go-openapi/swag v0.23.1/go.mod h1:STZs8TbRvEQQKUA+JZNAm3EWlgaOBGpyFDqQnDHMef0=
 github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=
 github.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
 github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
@@ -28,8 +58,10 @@ github.com/go-playground/validator/v10 v10.26.0 h1:SP05Nqhjcvz81uJaRfEV0YBSSSGMc
 github.com/go-playground/validator/v10 v10.26.0/go.mod h1:I5QpIEbmr8On7W0TktmJAumgzX4CA1XNl4ZmDuVHKKo=
 github.com/goccy/go-json v0.10.5 h1:Fq85nIqj+gXn/S5ahsiTlK3TmC85qgirsdTP/+DeaC4=
 github.com/goccy/go-json v0.10.5/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
+github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
 github.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/ilyakaznacheev/cleanenv v1.5.0 h1:0VNZXggJE2OYdXE87bfSSwGxeiGt9moSR2lOrsHHvr4=
 github.com/ilyakaznacheev/cleanenv v1.5.0/go.mod h1:a5aDzaJrLCQZsazHol1w8InnDcOX0OColm64SlIi6gk=
@@ -47,19 +79,34 @@ github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
 github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
 github.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=
 github.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=
+github.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=
+github.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=
 github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
 github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
 github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
 github.com/klauspost/cpuid/v2 v2.2.10 h1:tBs3QSyvjDyFTq3uoc/9xFpCuOsJQFNPiAhYdw2skhE=
 github.com/klauspost/cpuid/v2 v2.2.10/go.mod h1:hqwkgyIinND0mEev00jJYCxPNVRVXFQeu1XKlok6oO0=
 github.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=
+github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
 github.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=
 github.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
+github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
 github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
 github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
+github.com/mailru/easyjson v0.0.0-20190614124828-94de47d64c63/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
+github.com/mailru/easyjson v0.0.0-20190626092158-b2ccc519800e/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
+github.com/mailru/easyjson v0.7.6 h1:8yTIVnZgCoiM1TgqoeTl+LfU5Jg6/xL3QhGQnimLYnA=
+github.com/mailru/easyjson v0.7.6/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=
+github.com/mailru/easyjson v0.9.0 h1:PrnmzHw7262yW8sTBwxi1PdJA3Iw/EKBa8psRf7d9a4=
+github.com/mailru/easyjson v0.9.0/go.mod h1:1+xMtQp2MRNVL/V1bOzuP3aP8VNwRW55fQUto+XFtTU=
+github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
+github.com/mattn/go-colorable v0.1.14 h1:9A9LHSqF/7dyVVX6g0U9cwm9pG3kP9gSzcuIPHPsaIE=
+github.com/mattn/go-colorable v0.1.14/go.mod h1:6LmQG8QLFO4G5z1gPvYEzlUgJ2wF+stgPZH1UqBm1s8=
+github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
+github.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
 github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
 github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
@@ -67,47 +114,127 @@ github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
 github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
+github.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=
 github.com/pelletier/go-toml/v2 v2.2.4 h1:mye9XuhQ6gvn5h28+VilKrrPoQVanw5PMw/TB0t5Ec4=
 github.com/pelletier/go-toml/v2 v2.2.4/go.mod h1:2gIqNv+qfxSVS7cM2xJQKtLSTLUE9V8t9Stt+h56mCY=
+github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/rogpeppe/go-internal v1.14.1 h1:UQB4HGPB6osV0SQTLymcB4TgvyWu6ZyliaW0tI/otEQ=
 github.com/rogpeppe/go-internal v1.14.1/go.mod h1:MaRKkUm5W0goXpeCfT7UZI6fk/L7L7so1lCWt35ZSgc=
+github.com/rs/xid v1.6.0/go.mod h1:7XoLgs4eV+QndskICGsho+ADou8ySMSjJKDIan90Nz0=
+github.com/rs/zerolog v1.34.0 h1:k43nTLIwcTVQAncfCw4KZ2VY6ukYoZaBPNOE8txlOeY=
+github.com/rs/zerolog v1.34.0/go.mod h1:bJsvje4Z08ROH4Nhs5iH600c3IkWhwp44iRc54W6wYQ=
+github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
+github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
+github.com/samber/lo v1.49.1 h1:4BIFyVfuQSEpluc7Fua+j1NolZHiEHEpaSEKdsH0tew=
+github.com/samber/lo v1.49.1/go.mod h1:dO6KHFzUKXgP8LDhU0oI8d2hekjXnGOu0DB8Jecxd6o=
+github.com/samber/slog-formatter v1.2.0 h1:gTSHm4CxyySyhcxRkzk21CSKbGCdZVipbRMhINkNtQU=
+github.com/samber/slog-formatter v1.2.0/go.mod h1:hgjhSd5Vf69XCOnVp0UW0QHCxJ8iDEm/qASjji6FNoI=
+github.com/samber/slog-multi v1.3.3 h1:qhFXaYdW73FIWLt8SrXMXfPwY58NpluzKDwRdPvhWWY=
+github.com/samber/slog-multi v1.3.3/go.mod h1:ACuZ5B6heK57TfMVkVknN2UZHoFfjCwRxR0Q2OXKHlo=
+github.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=
+github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
+github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
 github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
 github.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=
 github.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+github.com/swaggo/files v1.0.1 h1:J1bVJ4XHZNq0I46UU90611i9/YzdrF7x92oX1ig5IdE=
+github.com/swaggo/files v1.0.1/go.mod h1:0qXmMNH6sXNf+73t65aKeB+ApmgxdnkQzVTAj2uaMUg=
+github.com/swaggo/gin-swagger v1.6.0 h1:y8sxvQ3E20/RCyrXeFfg60r6H0Z+SwpTjMYsMm+zy8M=
+github.com/swaggo/gin-swagger v1.6.0/go.mod h1:BG00cCEy294xtVpyIAHG6+e2Qzj/xKlRdOqDkvq0uzo=
+github.com/swaggo/swag v1.8.12 h1:pctzkNPu0AlQP2royqX3apjKCQonAnf7KGoxeO4y64w=
+github.com/swaggo/swag v1.8.12/go.mod h1:lNfm6Gg+oAq3zRJQNEMBE66LIJKM44mxFqhEEgy2its=
+github.com/swaggo/swag v1.16.4 h1:clWJtd9LStiG3VeijiCfOVODP6VpHtKdQy9ELFG3s1A=
+github.com/swaggo/swag v1.16.4/go.mod h1:VBsHJRsDvfYvqoiMKnsdwhNV9LEMHgEDZcyVYX0sxPg=
 github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
 github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
 github.com/ugorji/go/codec v1.2.14 h1:yOQvXCBc3Ij46LRkRoh4Yd5qK6LVOgi0bYOXfb7ifjw=
 github.com/ugorji/go/codec v1.2.14/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
+github.com/urfave/cli/v2 v2.27.6 h1:VdRdS98FNhKZ8/Az8B7MTyGQmpIr36O1EHybx/LaZ4g=
+github.com/urfave/cli/v2 v2.27.6/go.mod h1:3Sevf16NykTbInEnD0yKkjDAeZDS0A6bzhBH5hrMvTQ=
+github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 h1:gEOO8jv9F4OT7lGCjxCBTO/36wtF6j2nSip77qHd4x4=
+github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1/go.mod h1:Ohn+xnUBiLI6FVj/9LpzZWtj1/D6lUovWYBkxHVV3aM=
+github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
 golang.org/x/arch v0.17.0 h1:4O3dfLzd+lQewptAHqjewQZQDyEdejz3VwgeYwkZneU=
 golang.org/x/arch v0.17.0/go.mod h1:bdwinDaKcfZUGpH09BB7ZmOfhalA8lQdzl62l8gGWsk=
+golang.org/x/arch v0.18.0 h1:WN9poc33zL4AzGxqf8VtpKUnGvMi8O9lhNyBMF/85qc=
+golang.org/x/arch v0.18.0/go.mod h1:bdwinDaKcfZUGpH09BB7ZmOfhalA8lQdzl62l8gGWsk=
+golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.38.0 h1:jt+WWG8IZlBnVbomuhg2Mdq0+BBQaHbtqHEFEigjUV8=
 golang.org/x/crypto v0.38.0/go.mod h1:MvrbAqul58NNYPKnOra203SB9vpuZW0e+RRZV+Ggqjw=
+golang.org/x/crypto v0.39.0 h1:SHs+kF4LP+f+p14esP5jAoDpHU8Gu/v9lFRK6IT5imM=
+golang.org/x/crypto v0.39.0/go.mod h1:L+Xg3Wf6HoL4Bn4238Z6ft6KfEpN0tJGo53AAPC632U=
+golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
+golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
+golang.org/x/net v0.0.0-20210421230115-4e50805a0758/go.mod h1:72T/g9IO56b78aLF+1Kcs5dz7/ng1VjMUvfKvpfy+jM=
+golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
+golang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=
 golang.org/x/net v0.40.0 h1:79Xs7wF06Gbdcg4kdCCIQArK11Z1hr5POQ6+fIYHNuY=
 golang.org/x/net v0.40.0/go.mod h1:y0hY0exeL2Pku80/zKK7tpntoX23cqL3Oa6njdgRtds=
+golang.org/x/net v0.41.0 h1:vBTly1HeNPEn3wtREYfy4GZ/NECgw2Cnl+nK6Nz3uvw=
+golang.org/x/net v0.41.0/go.mod h1:B/K4NNqkfmg07DQYrbwvSluqCJOOXwUjeb/5lOisjbA=
+golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.14.0 h1:woo0S4Yywslg6hp4eUFjTVOyKt0RookbpAHG4c1HmhQ=
 golang.org/x/sync v0.14.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
+golang.org/x/sync v0.15.0 h1:KWH3jNZsfyT6xfAfKiz6MRNmd46ByHDYaZ7KSkCtdW8=
+golang.org/x/sync v0.15.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
+golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210420072515-93ed5bcd2bfe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.33.0 h1:q3i8TbbEz+JRD9ywIRlyRAQbM0qF7hu24q3teo2hbuw=
 golang.org/x/sys v0.33.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
+golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
+golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
+golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=
+golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
+golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
+golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
 golang.org/x/text v0.25.0 h1:qVyWApTSYLk/drJRO5mDlNYskwQznZmkpV2c8q9zls4=
 golang.org/x/text v0.25.0/go.mod h1:WEdwpYrmk1qmdHvhkSTNPm3app7v4rsT8F2UD6+VHIA=
+golang.org/x/text v0.26.0 h1:P42AVeLghgTYr4+xUnTRKDMqpar+PtX7KWuNQL21L8M=
+golang.org/x/text v0.26.0/go.mod h1:QK15LZJUUQVJxhz7wXgxSy/CJaTFjd0G+YLonydOVQA=
+golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
+golang.org/x/tools v0.26.0 h1:v/60pFQmzmT9ExmjDv2gGIfi3OqfKoEP6I5+umXlbnQ=
+golang.org/x/tools v0.26.0/go.mod h1:TPVVj70c7JJ3WCazhD8OdXcZg/og+b9+tH/KxylGwH0=
+golang.org/x/tools v0.34.0 h1:qIpSLOxeCYGg9TrcJokLBG4KFA6d795g0xkBkiESGlo=
+golang.org/x/tools v0.34.0/go.mod h1:pAP9OwEaY1CAW3HOmg3hLZC5Z0CCmzjAF2UQMSqNARg=
+golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 google.golang.org/protobuf v1.36.6 h1:z1NpPI8ku2WgiWnf+t9wTPsn6eP1L7ksHUlkfLvd9xY=
 google.golang.org/protobuf v1.36.6/go.mod h1:jduwjTPXsFjZGTmRluh+L6NjiWu7pchiJ2/5YcXBHnY=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
+gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
+gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gorm.io/driver/postgres v1.6.0 h1:2dxzU8xJ+ivvqTRph34QX+WrRaJlmfyPqXmoGVjMBa4=
@@ -117,3 +244,5 @@ gorm.io/gorm v1.30.0/go.mod h1:8Z33v652h4//uMA76KjeDH8mJXPm1QNCYrMeatR0DOE=
 nullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=
 olympos.io/encoding/edn v0.0.0-20201019073823-d3554ca0b0a3 h1:slmdOY3vp8a7KQbHkL+FLbvbkgMqmXojpFUO/jENuqQ=
 olympos.io/encoding/edn v0.0.0-20201019073823-d3554ca0b0a3/go.mod h1:oVgVk4OWVDi43qWBEyGhXgYxt7+ED4iYNpTngSLX2Iw=
+sigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=
+sigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=
diff --git a/internal/db/db.go b/internal/db/db.go
index e18d839..04a91f5 100644
--- a/internal/db/db.go
+++ b/internal/db/db.go
@@ -9,7 +9,6 @@ import (
 	"github.com/Sypovik/effectiveMobileTest/internal/models"
 	"gorm.io/driver/postgres"
 	"gorm.io/gorm"
-	"gorm.io/gorm/logger"
 )
 
 // var DB *gorm.DB
@@ -37,10 +36,10 @@ func Init() *gorm.DB {
 	)
 
 	// 2. Открыть соединение через GORM
-	var err error
-	DB, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
-		Logger: logger.Default.LogMode(logger.Info),
-	})
+	// DB, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
+	// 	Logger: logger.Default.LogMode(logger.Info),
+	// })
+	DB, err := gorm.Open(postgres.Open(dsn))
 	if err != nil {
 		log.Fatalf("DB: не удалось подключиться к базе данных: %v", err)
 	}
diff --git a/internal/dto/person_request.go b/internal/dto/person_request.go
index 50a4e61..aedfe46 100644
--- a/internal/dto/person_request.go
+++ b/internal/dto/person_request.go
@@ -9,15 +9,15 @@ package dto
 //	  "patronymic": "Vasilevich" // необязательно
 //	}
 type CreatePersonRequest struct {
-	Name       string  `json:"name" binding:"required"`
-	Surname    string  `json:"surname" binding:"required"`
-	Patronymic *string `json:"patronymic,omitempty"`
+	Name       string  `json:"name" binding:"required" example:"Ivan"`
+	Surname    string  `json:"surname" binding:"required" example:"Ivanov"`
+	Patronymic *string `json:"patronymic,omitempty" example:"Ivanovich"`
 }
 
 // UpdatePersonRequest — DTO для PUT/PATCH /people/{id}.
 // Все поля опциональны для частичного обновления (PATCH) или обязательны для PUT:
 type UpdatePersonRequest struct {
-	Name       *string `json:"name,omitempty"`
-	Surname    *string `json:"surname,omitempty"`
-	Patronymic *string `json:"patronymic,omitempty"`
+	Name       *string `json:"name,omitempty" example:"Ivan"`
+	Surname    *string `json:"surname,omitempty" example:"Ivanov"`
+	Patronymic *string `json:"patronymic,omitempty" example:"Ivanovich"`
 }
diff --git a/internal/dto/person_response.go b/internal/dto/person_response.go
index 767fe6e..da9430a 100644
--- a/internal/dto/person_response.go
+++ b/internal/dto/person_response.go
@@ -1,23 +1,24 @@
 package dto
 
-// PersonResponse — DTO, который мы возвращаем в ответе на клиент.
-// Содержит «обогащённую» информацию, в том числе age/gender/country.
+// PersonResponse represents a person with enriched information
+// @Description Person information with age, gender and country
 type PersonResponse struct {
-	ID         int     `json:"id"`
-	Name       string  `json:"name"`
-	Surname    string  `json:"surname"`
-	Patronymic *string `json:"patronymic,omitempty"`
-	Age        *int    `json:"age,omitempty"`
-	Gender     *string `json:"gender,omitempty"`
-	Country    *string `json:"country,omitempty"`
-	CreatedAt  string  `json:"created_at"` // RFC3339 формат
-	UpdatedAt  string  `json:"updated_at"`
+	ID         int     `json:"id" example:"1"`
+	Name       string  `json:"name" example:"Иван"`
+	Surname    string  `json:"surname" example:"Иванов"`
+	Patronymic *string `json:"patronymic,omitempty" example:"Иванович"`
+	Age        *int    `json:"age,omitempty" example:"30"`
+	Gender     *string `json:"gender,omitempty" example:"мужской"`
+	Country    *string `json:"country,omitempty" example:"RU"`
+	CreatedAt  string  `json:"created_at" example:"2023-01-01T00:00:00Z"`
+	UpdatedAt  string  `json:"updated_at" example:"2023-01-01T00:00:00Z"`
 }
 
-// ListPersonsResponse — DTO для GET /people со списком и пагинацией.
+// ListPersonsResponse represents paginated list of persons
+// @Description Paginated list of persons with total count
 type ListPersonsResponse struct {
-	TotalCount int64            `json:"total"` // общее число записей
-	Page       int              `json:"page"`  // текущая страница
-	Size       int              `json:"size"`  // размер страницы
-	Data       []PersonResponse `json:"data"`  // массив записей
+	TotalCount int64            `json:"total" example:"100"` // total number of records
+	Page       int              `json:"page" example:"1"`    // current page
+	Size       int              `json:"size" example:"10"`   // page size
+	Data       []PersonResponse `json:"data"`                // array of records
 }
diff --git a/internal/handlers/person_handler.go b/internal/handlers/person_handler.go
index 759847d..becedf9 100644
--- a/internal/handlers/person_handler.go
+++ b/internal/handlers/person_handler.go
@@ -8,6 +8,7 @@ import (
 	"github.com/Sypovik/effectiveMobileTest/internal/repository"
 	"github.com/Sypovik/effectiveMobileTest/internal/services"
 	"github.com/gin-gonic/gin"
+	"github.com/rs/zerolog/log"
 )
 
 type PersonHandler struct {
@@ -26,23 +27,82 @@ func RegisterPersonRoutes(r *gin.Engine, svc services.PersonService) {
 	}
 }
 
+// CreatePerson godoc
+// @Summary Создать новую персону
+// @Description Создает новую запись о человеке
+// @Tags people
+// @Accept json
+// @Produce json
+// @Param input body dto.CreatePersonRequest true "Данные для создания персоны"
+// @Success 201 {object} dto.PersonResponse "Успешно создано"
+// @Failure 400 {object} object "Неверный запрос"
+// @Failure 500 {object} object "Внутренняя ошибка сервера"
+// @Router /people [post]
 func (h *PersonHandler) CreatePerson(c *gin.Context) {
+	ctx := c.Request.Context()
+	logger := log.Ctx(ctx)
+
+	logger.
+		Info().
+		Msg("PersonHandler.CreatePerson: Входящий запрос")
+
 	var req dto.CreatePersonRequest
 	if err := c.ShouldBindJSON(&req); err != nil {
+		logger.
+			Error().
+			Err(err).
+			Msg("PersonHandler.CreatePerson: Неверный JSON в теле запроса")
 		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid request"})
 		return
 	}
 
-	person, err := h.Service.Create(c.Request.Context(), req)
+	logger.
+		Info().
+		Str("name", req.Name).
+		Str("surname", req.Surname).
+		Msg("PersonHandler.CreatePerson: Параметры запроса")
+
+	person, err := h.Service.Create(ctx, req)
 	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Msg("PersonHandler.CreatePerson: Ошибка при создании персоны в сервисе")
 		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
 		return
 	}
 
+	logger.
+		Info().
+		Int("ID", person.ID).
+		Msg("PersonHandler.CreatePerson: Персона успешно создана")
 	c.JSON(http.StatusCreated, person)
 }
 
+// ListPersons godoc
+// @Summary List persons
+// @Description Returns a list of persons with pagination and filtering
+// @Tags people
+// @Produce json
+// @Param name query string false "Filter by name"
+// @Param surname query string false "Filter by surname"
+// @Param patronymic query string false "Filter by patronymic"
+// @Param gender query string false "Filter by gender"
+// @Param country query string false "Filter by country"
+// @Param age query int false "Filter by age"
+// @Param page query int false "Page number"
+// @Param size query int false "Page size"
+// @Success 200 {object} dto.ListPersonsResponse "List of persons"
+// @Failure 500 {object} object "Internal server error"
+// @Router /people [get]
 func (h *PersonHandler) ListPersons(c *gin.Context) {
+	ctx := c.Request.Context()
+	logger := log.Ctx(ctx)
+
+	logger.
+		Info().
+		Msg("PersonHandler.ListPersons: Входящий запрос")
+
 	var filter repository.PersonFilter
 
 	// Параметры фильтрации
@@ -64,6 +124,12 @@ func (h *PersonHandler) ListPersons(c *gin.Context) {
 	if ageStr := c.Query("age"); ageStr != "" {
 		if age, err := strconv.Atoi(ageStr); err == nil {
 			filter.Age = &age
+		} else {
+			logger.
+				Error().
+				Err(err).
+				Str("ageParam", ageStr).
+				Msg("PersonHandler.ListPersons: Неверный параметр age")
 		}
 	}
 
@@ -79,69 +145,216 @@ func (h *PersonHandler) ListPersons(c *gin.Context) {
 	filter.Limit = size
 	filter.Offset = (page - 1) * size
 
-	list, err := h.Service.List(c.Request.Context(), filter)
+	logger.
+		Info().
+		Int("page", page).
+		Int("size", size).
+		Msg("PersonHandler.ListPersons: Фильтры и пагинация")
+
+	list, err := h.Service.List(ctx, filter)
 	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Msg("PersonHandler.ListPersons: Ошибка при получении списка в сервисе")
 		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
 		return
 	}
 
+	// Привяжем страницу и размер к ответу, если dto поддерживает такие поля
 	list.Page = page
 	list.Size = size
+
+	logger.
+		Info().
+		Int("получено", len(list.Data)).
+		Int64("общее_количество", list.TotalCount).
+		Int("страница", page).
+		Int("размер_страницы", size).
+		Msg("PersonHandler.ListPersons: Список сформирован")
+
 	c.JSON(http.StatusOK, list)
 }
 
+// GetPersonByID godoc
+// @Summary Получить персону по ID
+// @Description Возвращает информацию о человеке по его идентификатору
+// @Tags people
+// @Accept json
+// @Produce json
+// @Param id path int true "ID персоны"
+// @Success 200 {object} dto.PersonResponse "Успешный ответ"
+// @Failure 400 {object} object "Неверный ID"
+// @Failure 404 {object} object "Персона не найдена"
+// @Failure 500 {object} object "Внутренняя ошибка сервера"
+// @Router /people/{id} [get]
 func (h *PersonHandler) GetPersonByID(c *gin.Context) {
+	ctx := c.Request.Context()
+	logger := log.Ctx(ctx)
+
+	logger.
+		Info().
+		Msg("PersonHandler.GetPersonByID: Входящий запрос")
+
 	idStr := c.Param("id")
 	id, err := strconv.Atoi(idStr)
 	if err != nil || id < 1 {
+		logger.
+			Error().
+			Err(err).
+			Str("idParam", idStr).
+			Msg("PersonHandler.GetPersonByID: Неверный id в параметрах")
 		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid id"})
 		return
 	}
 
-	person, err := h.Service.GetByID(c.Request.Context(), id)
+	logger.
+		Info().
+		Int("ID", id).
+		Msg("PersonHandler.GetPersonByID: Параметр id корректен, ищем пользователя")
+
+	person, err := h.Service.GetByID(ctx, id)
 	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("ID", id).
+			Msg("PersonHandler.GetPersonByID: Ошибка при получении персоны из сервиса")
+		c.JSON(http.StatusInternalServerError, gin.H{"error": "internal error"})
+		return
+	}
+	if person == nil {
+		logger.
+			Info().
+			Int("ID", id).
+			Msg("PersonHandler.GetPersonByID: Пользователь не найден")
 		c.JSON(http.StatusNotFound, gin.H{"error": "person not found"})
 		return
 	}
 
+	logger.
+		Info().
+		Int("ID", id).
+		Msg("PersonHandler.GetPersonByID: Пользователь найден")
 	c.JSON(http.StatusOK, person)
 }
 
+// UpdatePerson godoc
+// @Summary Обновить данные персоны
+// @Description Обновляет информацию о человеке по его идентификатору
+// @Tags people
+// @Accept json
+// @Produce json
+// @Param id path int true "ID персоны"
+// @Param input body dto.UpdatePersonRequest true "Данные для обновления"
+// @Success 200 {object} dto.PersonResponse "Успешный ответ"
+// @Failure 400 {object} object "Неверный запрос"
+// @Failure 404 {object} object "Персона не найдена"
+// @Failure 500 {object} object "Внутренняя ошибка сервера"
+// @Router /people/{id} [put]
 func (h *PersonHandler) UpdatePerson(c *gin.Context) {
+	ctx := c.Request.Context()
+	logger := log.Ctx(ctx)
+
+	logger.
+		Info().
+		Msg("PersonHandler.UpdatePerson: Входящий запрос")
+
 	idStr := c.Param("id")
 	id, err := strconv.Atoi(idStr)
 	if err != nil || id < 1 {
+		logger.
+			Error().
+			Err(err).
+			Str("idParam", idStr).
+			Msg("PersonHandler.UpdatePerson: Неверный id в параметрах")
 		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid id"})
 		return
 	}
 
 	var req dto.UpdatePersonRequest
 	if err := c.ShouldBindJSON(&req); err != nil {
+		logger.
+			Error().
+			Err(err).
+			Msg("PersonHandler.UpdatePerson: Неверный JSON в теле запроса")
 		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid request body"})
 		return
 	}
 
-	person, err := h.Service.Update(c.Request.Context(), id, req)
+	logger.
+		Info().
+		Int("ID", id).
+		Str("Name", *req.Name).
+		Str("Surname", *req.Surname).
+		Msg("PersonHandler.UpdatePerson: Параметры для обновления")
+
+	person, err := h.Service.Update(ctx, id, req)
 	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("ID", id).
+			Msg("PersonHandler.UpdatePerson: Ошибка при обновлении персоны в сервисе")
 		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
 		return
 	}
 
+	logger.
+		Info().
+		Int("ID", id).
+		Msg("PersonHandler.UpdatePerson: Персона успешно обновлена")
 	c.JSON(http.StatusOK, person)
 }
 
+// DeletePerson godoc
+// @Summary Удалить персону
+// @Description Удаляет запись о человеке по его ID
+// @Tags people
+// @Param id path int true "ID персоны"
+// @Success 204 "Успешно удалено"
+// @Failure 400 {object} object "Неверный запрос"
+// @Failure 404 {object} object "Персона не найдена"
+// @Failure 500 {object} object "Внутренняя ошибка сервера"
+// @Router /people/{id} [delete]
 func (h *PersonHandler) DeletePerson(c *gin.Context) {
+	ctx := c.Request.Context()
+	logger := log.Ctx(ctx)
+
+	logger.
+		Info().
+		Msg("PersonHandler.DeletePerson: Входящий запрос")
+
 	idStr := c.Param("id")
 	id, err := strconv.Atoi(idStr)
 	if err != nil || id < 1 {
+		logger.
+			Error().
+			Err(err).
+			Str("idParam", idStr).
+			Msg("PersonHandler.DeletePerson: Неверный id в параметрах")
 		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid id"})
 		return
 	}
 
-	if err := h.Service.Delete(c.Request.Context(), id); err != nil {
+	logger.
+		Info().
+		Int("ID", id).
+		Msg("PersonHandler.DeletePerson: Пытаемся удалить пользователя")
+
+	if err := h.Service.Delete(ctx, id); err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("ID", id).
+			Msg("PersonHandler.DeletePerson: Ошибка при удалении персоны в сервисе")
 		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
 		return
 	}
 
+	logger.
+		Info().
+		Int("ID", id).
+		Msg("PersonHandler.DeletePerson: Персона успешно удалена")
 	c.Status(http.StatusNoContent)
 }
diff --git a/internal/repository/pg_person.go b/internal/repository/pg_person.go
index f8e428b..3c9a17e 100644
--- a/internal/repository/pg_person.go
+++ b/internal/repository/pg_person.go
@@ -6,6 +6,7 @@ import (
 	"fmt"
 
 	"github.com/Sypovik/effectiveMobileTest/internal/models"
+	"github.com/rs/zerolog/log"
 	"gorm.io/gorm"
 )
 
@@ -19,29 +20,104 @@ func NewPgPersonRepository(db *gorm.DB) PersonRepository {
 }
 
 func (r *PgPersonRepository) Create(ctx context.Context, person *models.Person) error {
-	return r.db.WithContext(ctx).Create(person).Error
+	// Здесь уже не указываем отдельное поле "source":
+	// просто пишем “PersonRepository.Create: ...” в тексте сообщения.
+	logger := log.Ctx(ctx)
+
+	err := r.db.WithContext(ctx).Create(person).Error
+	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Msgf("PersonRepository.Create: Ошибка при создании пользователя — имя=%s фамилия=%s", person.Name, person.Surname)
+		return err
+	}
+
+	logger.
+		Debug().
+		Int("ID", person.ID).
+		Msg("PersonRepository.Create: Пользователь успешно создан")
+	return nil
 }
 
 func (r *PgPersonRepository) GetByID(ctx context.Context, id int) (*models.Person, error) {
+	logger := log.Ctx(ctx)
+
 	var person models.Person
 	result := r.db.WithContext(ctx).First(&person, id)
 	if errors.Is(result.Error, gorm.ErrRecordNotFound) {
+		logger.
+			Debug().
+			Int("ID", id).
+			Msg("PersonRepository.GetByID: Пользователь не найден")
 		return nil, nil
 	}
-	return &person, result.Error
+	if result.Error != nil {
+		logger.
+			Error().
+			Err(result.Error).
+			Int("ID", id).
+			Msg("PersonRepository.GetByID: Ошибка при получении пользователя")
+		return nil, result.Error
+	}
+
+	logger.
+		Debug().
+		Int("ID", id).
+		Msg("PersonRepository.GetByID: Пользователь получен")
+	return &person, nil
 }
 
 func (r *PgPersonRepository) Update(ctx context.Context, person *models.Person) error {
-	return r.db.WithContext(ctx).Save(person).Error
+	logger := log.Ctx(ctx)
+
+	err := r.db.WithContext(ctx).Save(person).Error
+	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("ID", person.ID).
+			Msg("PersonRepository.Update: Ошибка при обновлении пользователя")
+		return err
+	}
+
+	logger.
+		Debug().
+		Int("ID", person.ID).
+		Msg("PersonRepository.Update: Пользователь успешно обновлён")
+	return nil
 }
 
 func (r *PgPersonRepository) Delete(ctx context.Context, id int) error {
-	return r.db.WithContext(ctx).Delete(&models.Person{}, id).Error
+	logger := log.Ctx(ctx)
+
+	err := r.db.WithContext(ctx).Delete(&models.Person{}, id).Error
+	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("ID", id).
+			Msg("PersonRepository.Delete: Ошибка при удалении пользователя")
+		return err
+	}
+
+	logger.
+		Debug().
+		Int("ID", id).
+		Msg("PersonRepository.Delete: Пользователь успешно удалён")
+	return nil
 }
 
 func (r *PgPersonRepository) List(ctx context.Context, filter PersonFilter) (results []models.Person, totalCount int64, err error) {
-	var persons []models.Person
+	logger := log.Ctx(ctx)
+
+	logger.
+		Debug().
+		Int("limit", filter.Limit).
+		Int("offset", filter.Offset).
+		Msg("PersonRepository.List: Запрос к БД на получение списка")
 
+	var persons []models.Person
 	query := r.db.WithContext(ctx).Model(&models.Person{})
 
 	if filter.Name != nil {
@@ -53,7 +129,7 @@ func (r *PgPersonRepository) List(ctx context.Context, filter PersonFilter) (res
 	if filter.Gender != nil {
 		query = query.Where("gender = ?", *filter.Gender)
 	}
-	if filter.Gender != nil {
+	if filter.Patronymic != nil {
 		query = query.Where("patronymic = ?", *filter.Patronymic)
 	}
 	if filter.Country != nil {
@@ -63,20 +139,34 @@ func (r *PgPersonRepository) List(ctx context.Context, filter PersonFilter) (res
 		query = query.Where("age = ?", *filter.Age)
 	}
 
-	if filter.Limit > 0 {
-		query = query.Limit(filter.Limit)
-	} else {
-		query = query.Limit(10) // default limit
+	if err := query.Count(&totalCount).Error; err != nil {
+		logger.
+			Error().
+			Err(err).
+			Msg("PersonRepository.List: Ошибка при подсчёте общего количества пользователей")
+		return nil, 0, fmt.Errorf("ошибка при подсчёте количества: %w", err)
 	}
 
-	query = query.Offset(filter.Offset)
+	limit := 10
+	if filter.Limit > 0 {
+		limit = filter.Limit
+	}
+	query = query.Limit(limit).Offset(filter.Offset)
 
 	if err := query.Find(&persons).Error; err != nil {
-		return nil, 0, fmt.Errorf("failed to list persons: %w", err)
-	}
-	if err := query.Count(&totalCount).Error; err != nil {
-		return nil, 0, fmt.Errorf("failed to count persons: %w", err)
+		logger.
+			Error().
+			Err(err).
+			Msg("PersonRepository.List: Ошибка при получении списка пользователей")
+		return nil, 0, fmt.Errorf("ошибка при получении списка: %w", err)
 	}
-	totalCounts := totalCount
-	return persons, totalCounts, nil
+
+	logger.
+		Debug().
+		Int("count", len(persons)).
+		Int64("total", totalCount).
+		Any("first person", persons[:1]).
+		Msg("PersonRepository.List: Результат получен из БД")
+
+	return persons, totalCount, nil
 }
diff --git a/internal/services/person_service.go b/internal/services/person_service.go
index 766482b..4be323c 100644
--- a/internal/services/person_service.go
+++ b/internal/services/person_service.go
@@ -7,6 +7,7 @@ import (
 	"github.com/Sypovik/effectiveMobileTest/internal/dto"
 	"github.com/Sypovik/effectiveMobileTest/internal/models"
 	"github.com/Sypovik/effectiveMobileTest/internal/repository"
+	"github.com/rs/zerolog/log"
 )
 
 type PersonService struct {
@@ -18,8 +19,14 @@ func NewPersonService(repo repository.PersonRepository) *PersonService {
 }
 
 // ===== Create =====
-
 func (s *PersonService) Create(ctx context.Context, req dto.CreatePersonRequest) (*dto.PersonResponse, error) {
+	logger := log.Ctx(ctx)
+	logger.
+		Debug().
+		Str("name", req.Name).
+		Str("surname", req.Surname).
+		Msg("PersonService.Create: Входящие данные")
+
 	// Обогащение данных
 	age, gender, country := enrichData(req.Name)
 
@@ -35,27 +42,70 @@ func (s *PersonService) Create(ctx context.Context, req dto.CreatePersonRequest)
 	}
 
 	if err := s.repo.Create(ctx, &person); err != nil {
+		logger.
+			Error().
+			Err(err).
+			Msg("PersonService.Create: Ошибка при создании персоны в репозитории")
 		return nil, err
 	}
 
+	logger.
+		Debug().
+		Int("id", person.ID).
+		Msg("PersonService.Create: Персона успешно создана")
+
 	return toDTO(&person), nil
 }
 
 // ===== GetByID =====
-
 func (s *PersonService) GetByID(ctx context.Context, id int) (*dto.PersonResponse, error) {
+	logger := log.Ctx(ctx)
+	logger.
+		Debug().
+		Int("id", id).
+		Msg("PersonService.GetByID: Запрос пользователя по ID")
+
 	person, err := s.repo.GetByID(ctx, id)
 	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("id", id).
+			Msg("PersonService.GetByID: Ошибка получения персоны из репозитория")
 		return nil, err
 	}
+
+	if person == nil {
+		logger.
+			Debug().
+			Int("id", id).
+			Msg("PersonService.GetByID: Персона не найдена")
+		return nil, nil
+	}
+
+	logger.
+		Debug().
+		Int("id", id).
+		Msg("PersonService.GetByID: Персона найдена")
+
 	return toDTO(person), nil
 }
 
 // ===== List =====
-
 func (s *PersonService) List(ctx context.Context, filter repository.PersonFilter) (*dto.ListPersonsResponse, error) {
+	logger := log.Ctx(ctx)
+	logger.
+		Debug().
+		Int("limit", filter.Limit).
+		Int("offset", filter.Offset).
+		Msg("PersonService.List: Запрос списка пользователей")
+
 	persons, total, err := s.repo.List(ctx, filter)
 	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Msg("PersonService.List: Ошибка получения списка из репозитория")
 		return nil, err
 	}
 
@@ -65,6 +115,15 @@ func (s *PersonService) List(ctx context.Context, filter repository.PersonFilter
 	}
 
 	page := filter.Offset/filter.Limit + 1
+
+	logger.
+		Debug().
+		Int("получено", len(dtos)).
+		Int64("общее_количество", total).
+		Int("страница", page).
+		Int("размер_страницы", filter.Limit).
+		Msg("PersonService.List: Список сформирован")
+
 	return &dto.ListPersonsResponse{
 		TotalCount: total,
 		Page:       page,
@@ -74,10 +133,20 @@ func (s *PersonService) List(ctx context.Context, filter repository.PersonFilter
 }
 
 // ===== Update =====
-
 func (s *PersonService) Update(ctx context.Context, id int, req dto.UpdatePersonRequest) (*dto.PersonResponse, error) {
+	logger := log.Ctx(ctx)
+	logger.
+		Debug().
+		Int("id", id).
+		Msg("PersonService.Update: Входящие данные на обновление")
+
 	person, err := s.repo.GetByID(ctx, id)
 	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("id", id).
+			Msg("PersonService.Update: Ошибка при получении персоны")
 		return nil, err
 	}
 
@@ -90,8 +159,6 @@ func (s *PersonService) Update(ctx context.Context, id int, req dto.UpdatePerson
 	if req.Patronymic != nil {
 		person.Patronymic = req.Patronymic
 	}
-
-	// Повторное обогащение, если имя изменилось
 	if req.Name != nil {
 		person.Age, person.Gender, person.Country = enrichData(person.Name)
 	}
@@ -99,14 +166,44 @@ func (s *PersonService) Update(ctx context.Context, id int, req dto.UpdatePerson
 	person.UpdatedAt = time.Now()
 
 	if err := s.repo.Update(ctx, person); err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("id", id).
+			Msg("PersonService.Update: Ошибка при обновлении персоны")
 		return nil, err
 	}
 
+	logger.
+		Debug().
+		Int("id", id).
+		Msg("PersonService.Update: Персона успешно обновлена")
+
 	return toDTO(person), nil
 }
 
 // ===== Delete =====
-
 func (s *PersonService) Delete(ctx context.Context, id int) error {
-	return s.repo.Delete(ctx, id)
+	logger := log.Ctx(ctx)
+	logger.
+		Debug().
+		Int("id", id).
+		Msg("PersonService.Delete: Запрос на удаление персоны")
+
+	err := s.repo.Delete(ctx, id)
+	if err != nil {
+		logger.
+			Error().
+			Err(err).
+			Int("id", id).
+			Msg("PersonService.Delete: Ошибка при удалении персоны")
+		return err
+	}
+
+	logger.
+		Debug().
+		Int("id", id).
+		Msg("PersonService.Delete: Персона успешно удалена")
+
+	return nil
 }
